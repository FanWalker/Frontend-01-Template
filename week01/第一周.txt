前端技能模型
  编程能力： 给个问题能写出来：算法、数据结构、异步编程等将复杂问题用代码实现出来；
     提升：刷题，刻意练习
  架构能力：解决大写不出来的问题（系统），系统分析，软件设计等，
     提升：读源代码，参与开源项目，通过issue，通读部分代码而不是全部
  工程能力：解决人多的问题，组织多人协作
  领域知识：工作所在领域的知识，比如自动埋点，前端数据分析
  前端知识：html，css，JavaScript，typescript等

学习方法
   整理法：
      顺序关系：比如编译：词法分析->语法分析->语义分析->代码优化->代码生成
      组合关系：比如，css规则：选择器，属性，value
      维度关系：如，JavaScript：词法，语义，运行时
      分类关系，如css简单选择器：id选择器，class选择器，元素选择器
   追溯法：确定知识的准确性
       源头：最早出现的论文、杂志，最早实现的案例
       标准和文档：w3.org，developer.mozilla.org
       权威专家
       案例：面向对象的概念、闭包的概念、MVC的概念

好的面试题
       广度：覆盖的知识面多
       深度：针对高级职位
       区分度：能够区分不同等级的候选人


优秀的工程师
       领域知识：知识体系完善
       能力：编程能力、架构能力、工程能力，
       潜力：基础牢固
       职业规划：对自己未来的规划、目标明确

职业发展
       晋升-成长->成就->晋升
       成就：业务型成就、工程型成就、技术难题
       业务型成就：应用手势，案例：tab组件增加手势操作，点击率提升3倍
       技术难题：编程能力、架构能力，案例：爬取商品价格，JS引入数字识别技术，靠AI识别图片
       工程型成就：质量、效率，案例：xss攻击的预防，xss攻击白帽子反馈漏洞，整理安全手册review历史代码，代码扫描工具

工具链

持续集成

技术架构
        客户端架构：解决软件需求规模带来的复杂性
        服务端架构：解决大量用户访问带来的复杂型
        前端架构：解决大量页面需求带来的重复劳动问题，提高复用率
              库：URL（拆成url的不同部分）、AJAX、ENV
              组件
              业务区块